//
//  CombineLatest.tt.swift
//  RxSwift
//
//  Created by Krunoslav Zaher on 4/22/15.
//  Copyright (c) 2015 Krunoslav Zaher. All rights reserved.
//

import Foundation

<% for i in 2 ... 10 { %>

class CombineLatestSink<%= i %>_<<%= ", ".join(map(1...i) { "T\($0)" }) %>, TResult> : CombineLatestSink<TResult> {
    typealias Parent = CombineLatest<%= i %><<%= ", ".join(map(1...i) { "T\($0)" }) %>, TResult>

    let parent: Parent

<%= "\n".join(map(1...i) { "    var observer\($0): CombineLatestObserver<T\($0)>! = nil" }) %>

    init(parent: Parent, observer: ObserverOf<TResult>, cancel: Disposable) {
        self.parent = parent
        super.init(arity: <%= i %>, observer: observer, cancel: cancel)
    }

    func run() -> Result<Disposable> {
        var subscriptions: [SingleAssignmentDisposable] = []
        subscriptions.reserveCapacity(<%= i %>)

        for i in 0 ..< <%= i %> {
            subscriptions.append(SingleAssignmentDisposable())
        }

<%= "\n".join(map(1...i) { "        observer\($0) = CombineLatestObserver(parent: self, index: \($0), this: subscriptions[\($0)])" }) %>

<%= "\n".join(map(1...i) { "        subscriptions[\($0)].setDisposable(*parent.source\($0).subscribeSafe(ObserverOf(observer\($0))))" }) %>

        return success(CompositeDisposable(disposables: subscriptions))
    }

    override func getResult() -> Result<TResult> {
        return self.parent.resultSelector(<%= ", ".join(map(1...i) { "observer\($0).value" }) %>)
    }
}

class CombineLatest<%= i %><<%= ", ".join(map(1...i) { "T\($0)" }) %>, TResult> : Producer<TResult> {
    typealias ResultSelector = (<%= ", ".join(map(1...i) { "T\($0)" }) %>) -> Result<TResult>

<%= "\n".join(map(1...i) { "    let source\($0): Observable<T\($0)>" }) %>

    let resultSelector: ResultSelector

    init(<%= ", ".join(map(1...i) { "source\($0): Observable<T\($0)>" }) %>, resultSelector: ResultSelector) {
<%= "\n".join(map(1...i) { "        self.source\($0) = source\($0)" })  %>

        self.resultSelector = resultSelector
    }

    override func run(observer: ObserverOf<TResult>, cancel: Disposable, setSink: (Disposable) -> Void) -> Result<Disposable> {
        let sink = CombineLatestSink<%= i %>_(parent: self, observer: observer, cancel: cancel)
        setSink(sink)
        return sink.run()
    }
}

<% } %>